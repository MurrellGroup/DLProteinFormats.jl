var documenterSearchIndex = {"docs":
[{"location":"#DLProteinFormats","page":"Home","title":"DLProteinFormats","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for DLProteinFormats.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#DLProteinFormats.flatten-Tuple{ProteinChains.ProteinStructure}","page":"Home","title":"DLProteinFormats.flatten","text":"flatten(rec::ProteinStructure; T = Float32)\n\nTakes a ProteinStructure and returns a tuple of the translations, rotations, residue indices, and features for each chain.\n\n\n\n\n\n","category":"method"},{"location":"#DLProteinFormats.sample_batched_inds-Tuple{Any}","page":"Home","title":"DLProteinFormats.sample_batched_inds","text":"sample_batched_inds(flatrecs; l2b = length2batch(1000, 1.9))\n\nTakes a vector of (flattened) protein structures, and returns a vector of indices into the original array, with each batch containing a random sample of one protein from each cluster.\n\n\n\n\n\n","category":"method"},{"location":"#DLProteinFormats.unflatten-Union{Tuple{T}, Tuple{AbstractArray{T, 3}, AbstractArray{T, 3}, AbstractVector, Any, Any}} where T","page":"Home","title":"DLProteinFormats.unflatten","text":"unflatten(locs, rots, seqints, chainids, resnums)\nunflatten(locs, rots, seqhots, chainids, resnums)  \nunflatten(locs, rots, seq, chainids, resnums)\n\nConverts flattened protein structure data back into ProteinChain objects.\n\nArguments\n\nlocs: Array of translations/locations (3×1×L or 3×1×L×B for batched)\nrots: Array of rotations (3×3×L or 3×3×L×B for batched) \nseqints/seqhots/seq: Sequence data as integers, one-hot encoding, or generic sequence\nchainids: Chain identifiers for each residue\nresnums: Residue numbers for each position\n\nReturns\n\nVector of ProteinChain objects (or vector of vectors for batched input)\n\nThe function reconstructs protein chains from flattened representations, applying unit scaling to locations and converting sequence integers back to amino acid strings.\n\n\n\n\n\n","category":"method"},{"location":"#ProteinChains.writepdb","page":"Home","title":"ProteinChains.writepdb","text":"writepdb(path, chains::AbstractVector{<:ProteinChains.ProteinChain})\n\nExamples\n\nusing DLProteinFormats\n\ndata = DLProteinFormats.load(PDBSimpleFlat500);\n\nflat_chains = data[1];\n\nchains = DLProteinFormats.unflatten(\n    flat_chains.locs,\n    flat_chains.rots,\n    flat_chains.AAs,\n    flat_chains.chainids,\n    flat_chains.resinds) # unflatten the flat data\n\nwritepdb(\"chains-1.pdb\", chains) # view in e.g. chimerax or vscode protein viewer extension\n\n\n\n\n\n","category":"function"}]
}
